{"version":3,"sources":["hotel.js"],"names":["PostForm","props","typeOptions","Object","keys","messageTypes","map","key","hasOwnProperty","defaultType","React","Component","StatusMessage","statusDate","date","parse","time","dateFormat","msg","type","format","StatusMessageList","state","statuses","isLoaded","retrieveStatusMessages","axios","get","apiUrl","then","response","setState","data","bind","status","id","displayStatusMessages","StatusMessageManager","management","dining","ops","plumbing","pool","ReactDOM","render","document","getElementById"],"mappings":"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","sourcesContent":["class PostForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // Type options are an object; convert to an array and map\n    this.typeOptions = Object.keys(props.messageTypes).map(function(key) {\n      if (props.messageTypes.hasOwnProperty(key)) {\n        return (\n          <option key={key} value={key}>\n            {props.messageTypes[key]}\n          </option>\n        );\n      }\n    });\n\n    // so we don't have to type this over and over\n    this.defaultType = this.typeOptions[0].key;\n  }\n\n  render() {\n    return (\n      <form>\n        <h3>Post an Update</h3>\n\n        <div className=\"field-group\">\n          <label htmlFor=\"txt-message\">Message</label>\n          <textarea id=\"txt-message\" rows=\"2\" />\n        </div>\n\n        <div className=\"field-group\">\n          <label htmlFor=\"txt-type\">Type</label>\n          <select id=\"txt-type\">{this.typeOptions}</select>\n        </div>\n\n        <div className=\"field-group action\">\n          <input type=\"submit\" value=\"Post Update\" />\n        </div>\n      </form>\n    );\n  }\n}\n\nfunction StatusMessage(props) {\n  var statusDate = date.parse(props.time, \"YYYY-MM-DD, HH:mm\"),\n    dateFormat = \"M/D/Y, h:mm A\";\n\n  return (\n    <div className=\"status-message\">\n      {props.msg}\n      <span className=\"name\">— {props.type}</span>\n      <span className=\"time\">{date.format(statusDate, dateFormat)}</span>\n    </div>\n  );\n}\n\nclass StatusMessageList extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      statuses: [],\n      isLoaded: false\n    };\n  }\n\n  componentDidMount() {\n    this.retrieveStatusMessages();\n  }\n\n  retrieveStatusMessages() {\n    axios.get(this.props.apiUrl + \"/get.php?delay=5\").then(\n      function(response) {\n        this.setState({\n          statuses: response.data,\n          isLoaded: true\n        });\n      }.bind(this)\n    );\n  }\n\n  displayStatusMessages() {\n    return this.state.statuses.map(\n      function(status) {\n        return (\n          <li key={status.id}>\n            <StatusMessage\n              msg={status.msg}\n              type={this.props.messageTypes[status.type]}\n              time={status.time}\n            />\n          </li>\n        );\n      }.bind(this)\n    );\n  }\n\n  render() {\n    if (this.state.isLoaded) {\n      return <ul id=\"status-list\">{this.displayStatusMessages()}</ul>;\n    } else {\n      return (\n        <div id=\"status-list\" className=\"loading\">\n          Loading...\n          <div className=\"spinner\">\n            <div className=\"bounce1\" />\n            <div className=\"bounce2\" />\n            <div className=\"bounce3\" />\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nclass StatusMessageManager extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // just a property, doesn't have to be state\n    this.messageTypes = {\n      management: \"Management\",\n      dining: \"Dining Services\",\n      ops: \"Operations\",\n      plumbing: \"Plumbing\",\n      pool: \"Pool\"\n    };\n\n    this.apiUrl = \"http://localhost/reactjs/status_api\";\n\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div id=\"post-status\">\n          <PostForm messageTypes={this.messageTypes} />\n        </div>\n        <StatusMessageList messageTypes={this.messageTypes} apiUrl={this.apiUrl} />\n      </React.Fragment>\n    );\n  }\n}\n\nReactDOM.render(<StatusMessageManager />, document.getElementById(\"react-statusmanager\"));\n"]}