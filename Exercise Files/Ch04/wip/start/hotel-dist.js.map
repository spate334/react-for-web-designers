{"version":3,"sources":["hotel.js"],"names":["PostForm","props","typeOptions","Object","keys","messageTypes","map","key","hasOwnProperty","defaultType","React","Component","StatusMessage","statusDate","date","parse","time","dateFormat","msg","type","format","StatusMessageList","stubStatuses","id","state","statuses","status","bind","displayStatusMessages","StatusMessageManager","management","dining","ops","plumbing","pool","apiUrl","ReactDOM","render","document","getElementById"],"mappings":"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","sourcesContent":["class PostForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // Type options are an object; convert to an array and map\n    this.typeOptions = Object.keys(props.messageTypes).map(function(key) {\n      if (props.messageTypes.hasOwnProperty(key)) {\n        return (\n          <option key={key} value={key}>\n            {props.messageTypes[key]}\n          </option>\n        );\n      }\n    });\n\n    // so we don't have to type this over and over\n    this.defaultType = this.typeOptions[0].key;\n  }\n\n  render() {\n    return (\n      <form>\n        <h3>Post an Update</h3>\n\n        <div className=\"field-group\">\n          <label htmlFor=\"txt-message\">Message</label>\n          <textarea id=\"txt-message\" rows=\"2\" />\n        </div>\n\n        <div className=\"field-group\">\n          <label htmlFor=\"txt-type\">Type</label>\n          <select id=\"txt-type\">{this.typeOptions}</select>\n        </div>\n\n        <div className=\"field-group action\">\n          <input type=\"submit\" value=\"Post Update\" />\n        </div>\n      </form>\n    );\n  }\n}\n\nfunction StatusMessage(props) {\n  var statusDate = date.parse(props.time, \"YYYY-MM-DD, HH:mm\"),\n    dateFormat = \"M/D/Y, h:mm A\";\n\n  return (\n    <div className=\"status-message\">\n      {props.msg}\n      <span className=\"name\">— {props.type}</span>\n      <span className=\"time\">{date.format(statusDate, dateFormat)}</span>\n    </div>\n  );\n}\n\nclass StatusMessageList extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.stubStatuses = [\n      {\n        id: 1,\n        msg:\n          \"The hot tub is currently closed for maintenance.  We expect it to be back up and running within 48 hours.\",\n        type: \"management\",\n        time: \"2018-03-30, 09:15\"\n      },\n      {\n        id: 2,\n        msg: \"The hot tub maintenance is complete.  Please enjoy a dip!\",\n        type: \"management\",\n        time: \"2018-03-30, 17:12\"\n      },\n      {\n        id: 3,\n        msg:\n          \"The rice cooker is on the fritz, any fried rice dishes will require some extra time to cook.\",\n        type: \"dining\",\n        time: \"2018-04-02, 15:00\"\n      }\n    ];\n\n    this.state = {\n      statuses: this.stubStatuses\n    };\n  }\n\n  displayStatusMessages() {\n    return this.state.statuses.map(\n      function(status) {\n        return (\n          <li key={status.id}>\n            <StatusMessage\n              msg={status.msg}\n              type={this.props.messageTypes[status.type]}\n              time={status.time}\n            />\n          </li>\n        );\n      }.bind(this)\n    );\n  }\n\n  render() {\n    return <ul id=\"status-list\">{this.displayStatusMessages()}</ul>;\n  }\n}\n\nclass StatusMessageManager extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // just a property, doesn't have to be state\n    this.messageTypes = {\n      management: \"Management\",\n      dining: \"Dining Services\",\n      ops: \"Operations\",\n      plumbing: \"Plumbing\",\n      pool: \"Pool\"\n    };\n\n    this.apiUrl = \"http://localhost/reactjs/status_api\";\n\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div id=\"post-status\">\n          <PostForm messageTypes={this.messageTypes} />\n        </div>\n        <StatusMessageList messageTypes={this.messageTypes} />\n      </React.Fragment>\n    );\n  }\n}\n\nReactDOM.render(<StatusMessageManager />, document.getElementById(\"react-statusmanager\"));\n"]}